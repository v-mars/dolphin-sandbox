syntax = "proto3";

package sandbox;

option go_package = "sandbox";

import "api.proto";
import "google/protobuf/struct.proto";

message SandboxQuery {
  int64 id = 1[(api.query)="id",(api.body)="id"];
  string name = 2[(api.query)="name",(api.body)="name"];
  optional bool enabled = 22[(api.query)="enabled",(api.go_tag)="json:\"enabled,omitempty\""];
}


message SandboxPost {
  string name = 3[(api.query)="name",(api.body)="name,required",(api.vd)="len($)>1"];
  string desc = 4[(api.query)="desc",(api.body)="desc"];
  int32 ippool_id = 5[(api.query)="ippool_id",(api.body)="ippool_id"];
  repeated int64 acl_ids = 20[(api.query)="acl_ids,omitempty",(api.body)="acl_ids,omitempty",(api.go_tag)="gorm:\"-\" ignore:\"yes\""];
  bool enabled = 21[(api.query)="enabled",(api.go_tag)="json:\"enabled,omitempty\""];
  bool allow_lan = 22[(api.query)="allow_lan",(api.go_tag)="json:\"allow_lan,omitempty\""];
}

message SandboxPut {
//  optional string title = 2[(api.query)="title",(api.body)="title,omitempty"];
  optional string name = 3[(api.query)="name",(api.body)="name,omitempty"];
  optional string desc = 4[(api.query)="desc",(api.body)="desc,omitempty"];
  optional int32 ippool_id = 5[(api.query)="ippool_id",(api.body)="ippool_id,omitempty"];
  google.protobuf.ListValue acl_ids = 20[(api.query)="acl_ids,omitempty",(api.body)="acl_ids,omitempty",(api.go_tag)="gorm:\"-\" ignore:\"yes\""];
  optional bool enabled = 21[(api.query)="enabled",(api.go_tag)="json:\"enabled,omitempty\""];
  optional bool allow_lan = 22[(api.query)="allow_lan",(api.go_tag)="json:\"allow_lan,omitempty\""];
}

message SandboxDel {

}

message SandboxResp {
  int64 id = 1[(api.query)="id",(api.body)="id"];
  string name = 3[(api.query)="name",(api.body)="name,required",(api.vd)="len($)>1"];
  string desc = 4[(api.query)="desc",(api.body)="desc"];
  bool enabled = 21[(api.query)="enabled",(api.go_tag)="json:\"enabled,omitempty\""];
  string created_at = 120[(api.query)="created_at",(api.body)="created_at"];
  string updated_at = 121[(api.query)="updated_at",(api.body)="updated_at"];
}

service Sandbox {
  rpc RunCodeSandbox(SandboxPost) returns(SandboxResp) {
    option (api.post) = "/api/sandbox/run";
  }
  rpc GetDependenciesSandbox(SandboxQuery) returns(SandboxResp) {
    option (api.get) = "/api/sandbox/dependencies";
  }
  rpc UpdateDependenciesSandbox(SandboxQuery) returns(SandboxResp) {
    option (api.post) = "/api/v1/sandbox/dependencies/update";
  }
  rpc RefreshDependenciesSandbox(SandboxQuery) returns(SandboxResp) {
    option (api.get) = "/api/v1/sandbox/dependencies/refresh";
  }
}