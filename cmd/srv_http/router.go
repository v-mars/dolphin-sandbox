// Code generated by hertz generator.

package srv_http

import (
	"context"
	"dolphin-sandbox/biz/handler"
	"dolphin-sandbox/biz/response"
	"dolphin-sandbox/conf"
	_ "dolphin-sandbox/docs"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/swagger"
	swaggerFiles "github.com/swaggo/files"
)

var domApi = fmt.Sprintf("/api/v1/%s", conf.Dom)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/health", handler.Health)
	r.GET("/ping", handler.Ping)
	r.GET("/panic", handler.Panic)
	r.GET("/routes", func(ctx context.Context, c *app.RequestContext) {
		routeInfo := r.Routes()
		hlog.Info(routeInfo)
		type res struct {
			Method  string `json:"method"`
			Path    string `json:"path"`
			Handler string `json:"handler"`
		}
		var data []res
		for _, v := range routeInfo {
			data = append(data, res{Method: v.Method, Path: v.Path, Handler: v.Handler})
		}
		response.SendDataResp(ctx, c, response.Succeed, data)
	})
	if conf.GetConf().Server.EnableSwagger {
		r.GET(fmt.Sprintf("%s/swagger/*any", domApi), swagger.WrapHandler(swaggerFiles.Handler, swagger.DocExpansion("none")))
	}

	r.GET("/", func(ctx context.Context, c *app.RequestContext) {
		c.Redirect(302, []byte(fmt.Sprintf("/%s/dashboard", conf.Dom)))
	})
	auth := r.Group("/auth")
	{
		auth.GET("/ping", handler.Ping)
	}

	// 服务api更新
	if conf.GetConf().Server.AutoUpdateApi {
		//api.UpdateApiByRoutes(db.DB, r)
	}
}

var (
	prefix = fmt.Sprintf("/%s", conf.Dom)
)
