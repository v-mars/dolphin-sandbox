// Code generated by hertz generator.

package sandbox

import (
	"context"
	"dolphin-sandbox/biz/model"
	"dolphin-sandbox/biz/pack/service"
	"dolphin-sandbox/biz/response"

	runnertypes "dolphin-sandbox/biz/pack/runner/types"
	"github.com/cloudwego/hertz/pkg/app"
)

// RunCodeSandbox .
//
//	@Summary		沙箱运行代码
//	@Description	沙箱运行代码
//	@Tags			沙箱
//
// @router /api/sandbox/run [POST]
func RunCodeSandbox(ctx context.Context, c *app.RequestContext) {
	model.BindRequest(ctx, c, func(req model.RunRequest) {
		switch req.Lang {
		case "python3":
			c.JSON(200, service.RunPython3Code(req.Code, req.Preload, &runnertypes.RunnerOptions{
				EnableNetwork: req.EnableNetwork,
			}))
		case "nodejs":
			c.JSON(200, service.RunNodeJsCode(req.Code, req.Preload, &runnertypes.RunnerOptions{
				EnableNetwork: req.EnableNetwork,
			}))
		default:
			c.JSON(400, response.ErrorResponse(-400, "unsupported language"))
		}
	})
}

// GetDependenciesSandbox .
//
//	@Summary		沙箱运行代码
//	@Description	沙箱运行代码
//	@Tags			沙箱
//
// @router /api/sandbox/dependencies [GET]
func GetDependenciesSandbox(ctx context.Context, c *app.RequestContext) {
	model.BindRequest(ctx, c, func(req struct {
		Lang string `json:"lang:required" form:"lang" binding:"required"`
	}) {
		switch req.Lang {
		case "python3":
			c.JSON(200, service.ListPython3Dependencies())
		default:
			c.JSON(400, response.ErrorResponse(-400, "unsupported language"))
		}
	})
}

// UpdateDependenciesSandbox .
//
//	@Summary		沙箱依赖更新
//	@Description	沙箱依赖更新
//	@Tags			沙箱
//
// @router /api/v1/sandbox/dependencies/update [POST]
func UpdateDependenciesSandbox(ctx context.Context, c *app.RequestContext) {
	model.BindRequest(ctx, c, func(req struct {
		Lang string `json:"lang:required" form:"lang" binding:"required"`
	}) {
		switch req.Lang {
		case "python3":
			c.JSON(200, service.UpdateDependencies())
		default:
			c.JSON(400, response.ErrorResponse(-400, "unsupported language"))
		}
	})
}

// RefreshDependenciesSandbox .
//
//	@Summary		沙箱依赖刷新
//	@Description	沙箱依赖刷新
//	@Tags			沙箱
//
// @router /api/v1/sandbox/dependencies/refresh [GET]
func RefreshDependenciesSandbox(ctx context.Context, c *app.RequestContext) {
	model.BindRequest(ctx, c, func(req struct {
		Lang string `json:"lang:required" form:"lang" binding:"required"`
	}) {
		switch req.Lang {
		case "python3":
			c.JSON(200, service.RefreshPython3Dependencies())
		default:
			c.JSON(400, response.ErrorResponse(-400, "unsupported language"))
		}
	})
}
