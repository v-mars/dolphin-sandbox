// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.24.2
// source: demo.proto

package demo

import (
	_ "dolphin-sandbox/kitex_gen/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DemoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id" query:"id"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
	Enabled *bool  `protobuf:"varint,22,opt,name=enabled,proto3,oneof" json:"enabled,omitempty" query:"enabled"`
}

func (x *DemoQuery) Reset() {
	*x = DemoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoQuery) ProtoMessage() {}

func (x *DemoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_demo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoQuery.ProtoReflect.Descriptor instead.
func (*DemoQuery) Descriptor() ([]byte, []int) {
	return file_demo_proto_rawDescGZIP(), []int{0}
}

func (x *DemoQuery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DemoQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DemoQuery) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type DemoPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,3,opt,name=name,proto3" form:"name,required" json:"name,required" query:"name" vd:"len($)>1"`
	Desc     string  `protobuf:"bytes,4,opt,name=desc,proto3" form:"desc" json:"desc" query:"desc"`
	IppoolId int32   `protobuf:"varint,5,opt,name=ippool_id,json=ippoolId,proto3" form:"ippool_id" json:"ippool_id" query:"ippool_id"`
	AclIds   []int64 `protobuf:"varint,20,rep,packed,name=acl_ids,json=aclIds,proto3" form:"acl_ids,omitempty" gorm:"-" ignore:"yes" json:"acl_ids,omitempty" query:"acl_ids,omitempty"`
	Enabled  bool    `protobuf:"varint,21,opt,name=enabled,proto3" json:"enabled,omitempty" query:"enabled"`
	AllowLan bool    `protobuf:"varint,22,opt,name=allow_lan,json=allowLan,proto3" json:"allow_lan,omitempty" query:"allow_lan"`
}

func (x *DemoPost) Reset() {
	*x = DemoPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoPost) ProtoMessage() {}

func (x *DemoPost) ProtoReflect() protoreflect.Message {
	mi := &file_demo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoPost.ProtoReflect.Descriptor instead.
func (*DemoPost) Descriptor() ([]byte, []int) {
	return file_demo_proto_rawDescGZIP(), []int{1}
}

func (x *DemoPost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DemoPost) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DemoPost) GetIppoolId() int32 {
	if x != nil {
		return x.IppoolId
	}
	return 0
}

func (x *DemoPost) GetAclIds() []int64 {
	if x != nil {
		return x.AclIds
	}
	return nil
}

func (x *DemoPost) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DemoPost) GetAllowLan() bool {
	if x != nil {
		return x.AllowLan
	}
	return false
}

type DemoPut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional string title = 2[(api.query)="title",(api.body)="title,omitempty"];
	Name     *string             `protobuf:"bytes,3,opt,name=name,proto3,oneof" form:"name,omitempty" json:"name,omitempty" query:"name"`
	Desc     *string             `protobuf:"bytes,4,opt,name=desc,proto3,oneof" form:"desc,omitempty" json:"desc,omitempty" query:"desc"`
	IppoolId *int32              `protobuf:"varint,5,opt,name=ippool_id,json=ippoolId,proto3,oneof" form:"ippool_id,omitempty" json:"ippool_id,omitempty" query:"ippool_id"`
	AclIds   *structpb.ListValue `protobuf:"bytes,20,opt,name=acl_ids,json=aclIds,proto3" form:"acl_ids,omitempty" gorm:"-" ignore:"yes" json:"acl_ids,omitempty" query:"acl_ids,omitempty"`
	Enabled  *bool               `protobuf:"varint,21,opt,name=enabled,proto3,oneof" json:"enabled,omitempty" query:"enabled"`
	AllowLan *bool               `protobuf:"varint,22,opt,name=allow_lan,json=allowLan,proto3,oneof" json:"allow_lan,omitempty" query:"allow_lan"`
}

func (x *DemoPut) Reset() {
	*x = DemoPut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoPut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoPut) ProtoMessage() {}

func (x *DemoPut) ProtoReflect() protoreflect.Message {
	mi := &file_demo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoPut.ProtoReflect.Descriptor instead.
func (*DemoPut) Descriptor() ([]byte, []int) {
	return file_demo_proto_rawDescGZIP(), []int{2}
}

func (x *DemoPut) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DemoPut) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *DemoPut) GetIppoolId() int32 {
	if x != nil && x.IppoolId != nil {
		return *x.IppoolId
	}
	return 0
}

func (x *DemoPut) GetAclIds() *structpb.ListValue {
	if x != nil {
		return x.AclIds
	}
	return nil
}

func (x *DemoPut) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DemoPut) GetAllowLan() bool {
	if x != nil && x.AllowLan != nil {
		return *x.AllowLan
	}
	return false
}

type DemoDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DemoDel) Reset() {
	*x = DemoDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoDel) ProtoMessage() {}

func (x *DemoDel) ProtoReflect() protoreflect.Message {
	mi := &file_demo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoDel.ProtoReflect.Descriptor instead.
func (*DemoDel) Descriptor() ([]byte, []int) {
	return file_demo_proto_rawDescGZIP(), []int{3}
}

type DemoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id" query:"id"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" form:"name,required" json:"name,required" query:"name" vd:"len($)>1"`
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" form:"desc" json:"desc" query:"desc"`
	Enabled   bool   `protobuf:"varint,21,opt,name=enabled,proto3" json:"enabled,omitempty" query:"enabled"`
	CreatedAt string `protobuf:"bytes,120,opt,name=created_at,json=createdAt,proto3" form:"created_at" json:"created_at" query:"created_at"`
	UpdatedAt string `protobuf:"bytes,121,opt,name=updated_at,json=updatedAt,proto3" form:"updated_at" json:"updated_at" query:"updated_at"`
}

func (x *DemoResp) Reset() {
	*x = DemoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoResp) ProtoMessage() {}

func (x *DemoResp) ProtoReflect() protoreflect.Message {
	mi := &file_demo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoResp.ProtoReflect.Descriptor instead.
func (*DemoResp) Descriptor() ([]byte, []int) {
	return file_demo_proto_rawDescGZIP(), []int{4}
}

func (x *DemoResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DemoResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DemoResp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DemoResp) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DemoResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DemoResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_demo_proto protoreflect.FileDescriptor

var file_demo_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x65,
	0x6d, 0x6f, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x09,
	0x44, 0x65, 0x6d, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18,
	0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca,
	0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27,
	0xb2, 0xbb, 0x18, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x8f, 0x03, 0x0a, 0x08, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xb2, 0xbb,
	0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0xda, 0xbb, 0x18, 0x08, 0x6c, 0x65, 0x6e, 0x28, 0x24,
	0x29, 0x3e, 0x31, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x64, 0x65, 0x73,
	0x63, 0xca, 0xbb, 0x18, 0x04, 0x64, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x37, 0x0a, 0x09, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x09, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0xca, 0xbb, 0x18, 0x09, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x52, 0x08,
	0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x07, 0x61, 0x63, 0x6c, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x42, 0x43, 0xb2, 0xbb, 0x18, 0x11, 0x61,
	0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0xca, 0xbb, 0x18, 0x11, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x15, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x52, 0x06,
	0x61, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0xb2, 0xbb,
	0x18, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0xca, 0xf3, 0x18, 0x1a, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4c, 0x61, 0x6e, 0x22, 0x86, 0x04, 0x0a, 0x07, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x75, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2,
	0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x64, 0x65, 0x73, 0x63, 0xca, 0xbb, 0x18, 0x0e,
	0x64, 0x65, 0x73, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x70, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0xb2, 0xbb,
	0x18, 0x09, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x13, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x02, 0x52, 0x08, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x78, 0x0a, 0x07, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x43,
	0xb2, 0xbb, 0x18, 0x11, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xbb, 0x18, 0x11, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x15, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x3a, 0x22, 0x79,
	0x65, 0x73, 0x22, 0x52, 0x06, 0x61, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0xb2, 0xbb,
	0x18, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0xb2, 0xbb, 0x18, 0x09, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x61, 0x6e, 0xca, 0xf3, 0x18, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x04, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x22, 0x09, 0x0a, 0x07,
	0x44, 0x65, 0x6d, 0x6f, 0x44, 0x65, 0x6c, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x6d, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0xda, 0xbb, 0x18, 0x08, 0x6c,
	0x65, 0x6e, 0x28, 0x24, 0x29, 0x3e, 0x31, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18,
	0x04, 0x64, 0x65, 0x73, 0x63, 0xca, 0xbb, 0x18, 0x04, 0x64, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x41, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x32, 0x97, 0x02, 0x0a, 0x04, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6d, 0x6f, 0x12, 0x0f, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x44, 0x65, 0x6d,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x15, 0xca, 0xc1, 0x18, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x12, 0x41, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x0e, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x44, 0x65, 0x6d, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x15, 0xd2, 0xc1, 0x18, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x12,
	0x41, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x0d, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x17, 0xda, 0xc1, 0x18, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2f, 0x64,
	0x64, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x6f,
	0x12, 0x0d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x44, 0x65, 0x6c, 0x1a,
	0x0e, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x19, 0xe2, 0xc1, 0x18, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x3a, 0x69, 0x64, 0x42, 0x20, 0x5a, 0x1e, 0x64, 0x6f,
	0x6c, 0x70, 0x68, 0x69, 0x6e, 0x2d, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2f, 0x6b, 0x69,
	0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_demo_proto_rawDescOnce sync.Once
	file_demo_proto_rawDescData = file_demo_proto_rawDesc
)

func file_demo_proto_rawDescGZIP() []byte {
	file_demo_proto_rawDescOnce.Do(func() {
		file_demo_proto_rawDescData = protoimpl.X.CompressGZIP(file_demo_proto_rawDescData)
	})
	return file_demo_proto_rawDescData
}

var file_demo_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_demo_proto_goTypes = []interface{}{
	(*DemoQuery)(nil),          // 0: demo.DemoQuery
	(*DemoPost)(nil),           // 1: demo.DemoPost
	(*DemoPut)(nil),            // 2: demo.DemoPut
	(*DemoDel)(nil),            // 3: demo.DemoDel
	(*DemoResp)(nil),           // 4: demo.DemoResp
	(*structpb.ListValue)(nil), // 5: google.protobuf.ListValue
}
var file_demo_proto_depIdxs = []int32{
	5, // 0: demo.DemoPut.acl_ids:type_name -> google.protobuf.ListValue
	0, // 1: demo.Demo.GetDemo:input_type -> demo.DemoQuery
	1, // 2: demo.Demo.PostDemo:input_type -> demo.DemoPost
	2, // 3: demo.Demo.PutDemo:input_type -> demo.DemoPut
	3, // 4: demo.Demo.DeleteDemo:input_type -> demo.DemoDel
	4, // 5: demo.Demo.GetDemo:output_type -> demo.DemoResp
	4, // 6: demo.Demo.PostDemo:output_type -> demo.DemoResp
	4, // 7: demo.Demo.PutDemo:output_type -> demo.DemoResp
	4, // 8: demo.Demo.DeleteDemo:output_type -> demo.DemoResp
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_demo_proto_init() }
func file_demo_proto_init() {
	if File_demo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_demo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_demo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_demo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoPut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_demo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_demo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_demo_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_demo_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_demo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_demo_proto_goTypes,
		DependencyIndexes: file_demo_proto_depIdxs,
		MessageInfos:      file_demo_proto_msgTypes,
	}.Build()
	File_demo_proto = out.File
	file_demo_proto_rawDesc = nil
	file_demo_proto_goTypes = nil
	file_demo_proto_depIdxs = nil
}
